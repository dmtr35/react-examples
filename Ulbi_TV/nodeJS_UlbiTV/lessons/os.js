const os = require('os')  
const cluster = require('cluster')             // модуль для того, чтобы однопоточному js-приложению использовать все возможности многоядерных систем и запускать дочерние процессы

// console.log(os.platform())             // под какой операционной системой работает
// console.log(os.arch())                 // возвращает архитектуру процессора
// console.log(os.cpus())                 // массив. каждый обьеут массива - описание ядра процессора
// console.log(os.cpus().length)          // количество ядер

//----------------------------------------------------

if (cluster.isMaster) {                                    // Делаем проверку, является ли процесс главный, за это отвеч. свойство ".isMaster"...
    for (let i = 0; i < os.cpus().length -2; i++) {             // ...если главный, мы должны запустить дочерние процессы
        cluster.fork()                                       // для каждого ядра мы будем запускать дочерний процесс. функция ".fork"
    }
    cluster.on('exit', (worker) => {                                    //? процессы могут падать, поэтому нужно такие ситуации продумать и обработать
        console.log(`Воргер с pid = ${worker.process.pid} умер`);       //? в данном случае мы подписываемся на событие 'exit'
        cluster.fork()                                                  //? мы можем подписываться на определенные собития          
    })                                                 
} else {                                         // else отработает в том случае когда будут запускаться дочерние процессы
    console.log(`Воркер с pid = ${process.pid} запущен`)

    setInterval(() => {                                               // добавляем интервал что процесс с таким-то id еще работает
        console.log(`Воркер с pid = ${process.pid} все еще работает`)        
    }, 10000)
}















